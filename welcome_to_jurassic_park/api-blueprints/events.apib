# Group Events

## Events Collection [/events]
Collection of events.

### Create a new event [POST]

+ Request (application/json; charset=utf-8)

    + Attributes (EventRequest101)

+ Response 400

    + Attributes (ErrorMissingField)

+ Request (application/json; charset=utf-8)

    + Attributes (EventRequest102)

+ Response 400

    + Attributes (ErrorInvalidCategory)

+ Request (application/json; charset=utf-8)

    + Attributes (EventRequest103)

+ Response 400

    + Attributes (ErrorHostRequired)

+ Request (application/json; charset=utf-8)

    + Attributes (EventRequest104)

+ Response 403

    + Attributes (ErrorInvalidHost)

+ Request (application/json; charset=utf-8)

    + Attributes (EventRequest100)

+ Response 201 (application/json; charset=utf-8)

    + Attributes (object)
        + eventId: `aaaaaaaaaaaaaaaaaaaaaaaa` (string)


### List all the events [GET /events{?withHosts}{?name}{?results}{?radius}{?coordinates}]

+ Parameters

    + withHosts: `true` (boolean) - Whether to include host details
    + name: `` (string) - Name of the event (uses similarity check)
    + results: 10 (number) - Number of events to retrieve
    + coordinates: `-123.100761,49.280659` (string) - CSV string of coordinates (lng, lat)
    + radius: 1000 (number) - Radius surrounding the given coordinates (in meters), requires coordinates to be specified

+ Request (application/json; charset=utf-8)

+ Response 400

    + Attributes (ErrorInvalidLocation)

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)

    + Attributes (object)
        + `aaaaaaaaaaaaaaaaaaaaaaaa` (Event)


### Find specific event(s) [GET /events/{eventIds}{?withHosts}]
    
+ Parameters

    + eventIds: `aaaaaaaaaaaaaaaaaaaaaaaa,bbbbbbbbbbbbbbbbbbbbbbbb` (required, string) - CSV string of ids
    + withHosts: `true` (boolean) - Whether to include host details

+ Response 200 (application/json; charset=utf-8)

    + Attributes (object)
        + `aaaaaaaaaaaaaaaaaaaaaaaa` (Event)
        + `bbbbbbbbbbbbbbbbbbbbbbbb` (Event)


### Set an event [PUT /events/{eventId}]

Without the proper authorization, the user cannot make any PUT changes.

The "hosts" field of an event cannot be altered through this endpoint

+ Parameters

    + eventId: `aaaaaaaaaaaaaaaaaaaaaaaa` (required, string)

+ Request (application/json; charset=utf-8)

    + Attributes (EventRequest200)

+ Response 403

    + Attributes (ErrorNotAuthorizedEventChange)

+ Request (application/json; charset=utf-8)

    + Attributes (EventRequest200)

+ Response 404

    + Attributes (ErrorEventDoesNotExist)

+ Request (application/json; charset=utf-8)

    + Attributes (EventRequest200)

+ Response 204


### Delete an event [DELETE /events/{eventId}]

Without the proper authorization, the user will not be able to delete the event

+ Parameters

    + eventId: `aaaaaaaaaaaaaaaaaaaaaaaa` (required, string)

+ Request (application/json; charset=utf-8)

+ Response 403

    + Attributes (ErrorNotAuthorizedEventChange)

+ Request (application/json; charset=utf-8)

+ Response 404

    + Attributes (ErrorEventDoesNotExist)

+ Request (application/json; charset=utf-8)

+ Response 204


## Functions [/events/{eventId}/function]
Collection of specific functions relating to events.

### Check Event User Authorized [GET /events/{eventId}/user/authorized]

This endpoint checks whether the user is authorized in to make changes to the event

The event is described by the eventId, and information on the user is obtained automatically from the Authorization header

+ Parameters

    + eventId: `aaaaaaaaaaaaaaaaaaaaaaaa` (required, string)

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)

    + Attributes (object)
        + authorized: false (boolean)

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)

    + Attributes (object)
        + authorized: true (boolean)


## Partial Updates [/events/{eventId}]

### Update event host [PATCH /events/{eventId}/host]

This endpoint ensures that, when adding a host, both the user and event collections are updated.

+ Parameters

    + eventId: `aaaaaaaaaaaaaaaaaaaaaaaa` (required, string)

+ Request (application/json; charset=utf-8)

    + Attributes (object)
        + `hosts` (array)
            + `bbbbbbbbbbbbbbbbbbbbbbbb` (required, string)

+ Response 403

    + Attributes (ErrorNotAuthorizedEventChange)

+ Request (application/json; charset=utf-8)

    + Attributes (object)
        + `hosts` (array)
            + `bbbbbbbbbbbbbbbbbbbbbbbb` (required, string)

+ Response 404

    + Attributes (ErrorEventDoesNotExist)

+ Request (application/json; charset=utf-8)

    + Attributes (object)
        + `hosts` (array)
            + `000000000000000000000000` (required, string)

+ Response 404

    + Attributes (ErrorUserDoesNotExist)

+ Request (application/json; charset=utf-8)

    + Attributes (object)
        + `hosts` (array)
            + `bbbbbbbbbbbbbbbbbbbbbbbb` (required, string)

+ Response 204


### Contribute event rating [PATCH /events/{eventId}/rate]

This endpoint allows users to add their own rating to events. The total final rating will be computed before pushing to the tables.

+ Parameters

    + eventId: `aaaaaaaaaaaaaaaaaaaaaaaa` (required, string)

+ Request (application/json; charset=utf-8)

    + Attributes (object)
        + `userId`: `bbbbbbbbbbbbbbbbbbbbbbbb` (required, string)

+ Response 400

    + Attributes (ErrorMissingField)

+ Request (application/json; charset=utf-8)

    + Attributes (object)
        + `userId`: `bbbbbbbbbbbbbbbbbbbbbbbb` (required, string)
        + `rating`: 3 (required, number)

+ Response 404

    + Attributes (ErrorEventDoesNotExist)

+ Request (application/json; charset=utf-8)

    + Attributes (object)
        + `userId`: `bbbbbbbbbbbbbbbbbbbbbbbb` (required, string)
        + `rating`: 3 (required, number)

+ Response 404

    + Attributes (ErrorUserDoesNotExist)

+ Request (application/json; charset=utf-8)

    + Attributes (object)
        + `userId`: `bbbbbbbbbbbbbbbbbbbbbbbb` (required, string)
        + `rating`: 3 (required, number)

+ Response 204
